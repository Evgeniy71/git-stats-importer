#!/usr/bin/env node

// Dependencies
var GitStats = require("git-stats")
  , ExecSync = require("exec-sync")
  , Repo = require("gry")
  , Fs = require("fs")
  , Logger = require("bug-killer")
  , Async = require("async")
  , OArgv = require("oargv")
  ;

// Configure logger
Logger.config.displayDate = false;
Logger.config.logLevel = 4;

// Check if it's a git repo
if (!Fs.existsSync(".git/")) {
    return Logger.log("This is not a git project.", "error");
}

// Get commits
var myRepo = new Repo(".");
myRepo.exec("config user.email", function (err, GIT_EMAIL) {
    if (err) { return Logger.log(err, "error"); }
    myRepo.exec("config --get remote.origin.url", function (err, REMOTE_URL) {
        if (!REMOTE_URL) {
            return Logger.log("Cannot find the remote origin url. Please add it.", "error");
        }


        var count = 0
          ;

        function getLogSeq(c, callback) {
            console.log(">> " + c);
            var command = OArgv({
                author: GIT_EMAIL
              , "max-count": "100"
              , skip: c.toString()
            }, "log");
            myRepo.exec(command, function (err, data) {
                if (err) { return Logger.log(err, "error"); }
                if (!data) { return callback(null); }
                data = data.split("\n");

                function doSeq(i) {
                    var cLine = data[i];
                    if (cLine == undefined) {
                        return getLogSeq(c + 100, callback);
                    }

                    if (!/^commit\ /.test(cLine)) { return doSeq(i + 1); }
                    function getDate(x) {
                        var date = (data[x].match(/^Date: (.*)/) || [])[1];
                        if (date) { return date.trim(); }
                        return getDate(x + 1);
                    }

                    var commitHash = cLine.match(/^commit (.*)/)[1].trim()
                      , date = getDate(i)
                      ;

                    GitStats.record({
                        date: date
                      , url: REMOTE_URL
                      , hash: commitHash
                    }, function (err) {
                        if (err) { return Logger.log(err, "error"); }
                        Logger.log((++count) + " Imported commit: " + commitHash, "info");
                        doSeq(i + 1);
                    });
                }

                doSeq(0);
            });
        }

        getLogSeq(0, function (err) {
            if (err) { return Logger.log(err, "error"); }
            Logger.log("Done.", "info");
        });
    });
});

